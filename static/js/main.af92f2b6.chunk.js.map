{"version":3,"sources":["actions.js","reducers.js","components/TaskItem/readOnly.jsx","components/Constants.js","components/AddTask/index.jsx","components/TaskItem/Editable.jsx","components/TaskItem/index.jsx","components/TasksList/index.jsx","containers/Filter.js","containers/List.js","containers/Add.js","components/TaskTimer/helpers.js","components/TaskTimer/TimerCountdown.jsx","components/TaskTimer/TimerButtons.jsx","components/TaskTimer/index.jsx","containers/Timer.js","App.js","serviceWorker.js","index.js"],"names":["types","idTask","actionCreators","newTask","type","task","Object","objectSpread","id","editable","status","value","time","estimated_duration","description","deadline","elapsed","initialState","tasks","filter","timer","tasksApp","state","arguments","length","undefined","action","concat","toConsumableArray","map","completed_duration","runningTask","Title","Typography","Paragraph","Item","Menu","TaskItem","_ref","actions","menu","react_default","a","createElement","es_menu","style","color","onClick","setEditable","icon","remove","DropdownActions","textAlign","fontSize","dropdown","overlay","showTime","card","Meta","avatar","level","title","DurationTypes","key","timeValue","tag","Form","Option","Select","TaskForm","create","name","mapPropsToFields","props","createFormField","_Component","_temp","_getPrototypeOf2","_this","classCallCheck","this","_len","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","handleSubmit","e","preventDefault","_this$props","form","add","edit","validateFields","err","values","resetFields","inherits","createClass","getFieldDecorator","iconButton","es_form","onSubmit","row","gutter","col","span","AddTask_Item","hasFeedback","rules","required","message","input","placeholder","es_select","d","es_button","htmlType","Component","AddTask","size","Editable","readOnly","TasksList","timeline","item","components_TaskItem","empty","Container","connect","dispatch","selectFilter","v","justify","padding","allowClear","width","onChange","Filter_Option","TabPane","Tabs","_ref2","todos","t","filterTodos","completed","tabs","defaultActiveKey","tab","Filter","components_TasksList","assign","n","convert","Date","now","msToTime","duration","seconds","parseInt","minutes","hours","Countdown","Statistic","CountDown","finish","pauseTime","styles","valueStyle","TimerCountdown_Paragraph","onFinish","statistic","Group","Button","styleControlButton","Buttons","canStart","disabled","start","margin","resume","pause","stop","reset","TaskTimer","nextTask","_this$props2","_this$props3","remaining","_this$props4","_this$props5","_this$props6","setCompleted","_this$props7","_this$props8","TimerCountdown","TimerButtons","startTimer","pauseTimer","resumeTimer","stopTimer","resetTimer","Header","Layout","Content","App","className","layout","position","zIndex","height","marginTop","Timer","minHeight","List","Add","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af92f2b6.chunk.js","sourcesContent":["export const types = {\n  ADD_TASK: 'ADD_TASK',\n  SELECT_FILTER: 'SELECT_FILTER',\n  REMOVE_TASK: 'REMOVE_TASK',\n  EDITABLE_TASK: 'EDITABLE_TASK',\n  COMPLETED_TASK: 'COMPLETED_TASK',\n  EDIT_TASK: 'EDIT_TASK',\n  START_TIMER: 'START_TIMER',\n  PAUSE_TIMER: 'PAUSE_TIMER',\n  RESET_TIMER: 'RESET_TIMER',\n  STOP_TIMER: 'STOP_TIMER',\n}\n\nlet idTask = 0\n\nexport const actionCreators = {\n  // ADD TASK\n  addTask: (newTask) => {\n    return {\n      type: types.ADD_TASK,\n      task: { id: idTask++, ...newTask, editable: false, status: 0 }\n    }\n  },\n  // SELECT FILTER for TODOs List\n  selectFilter: (value) => {\n    return {\n      type: types.SELECT_FILTER,\n      value\n    }\n  },\n  // REMOVE TASK\n  removeTask: (id) => {\n    return {\n      type: types.REMOVE_TASK,\n      id,\n    }\n  },\n  // EDITABLE TASK\n  editableTask: (id) => {\n    return {\n      type: types.EDITABLE_TASK,\n      id,\n    }\n  },\n  // COMPLETED TASK\n  completedTask: (id, time) => {\n    return {\n      type: types.COMPLETED_TASK,\n      id,\n      time\n    }\n  },\n  // EDIT TASK\n  editTask: (task) => {\n    return {\n      type: types.EDIT_TASK,\n      id: task.id,\n      estimated_duration: task.estimated_duration,\n      description: task.description,\n    }\n  },\n  // START TASK TIMER\n  startTimer: (task, deadline) => {\n    return {\n      type: types.START_TIMER,\n      task,\n      deadline\n    }\n  },\n  // PAUSE TASK TIMER\n  pauseTimer: (elapsed) => {\n    return {\n      type: types.PAUSE_TIMER,\n      elapsed,\n    }\n  },\n  // STOP TASK TIMER\n  stopTimer: (task) => {\n    return {\n      type: types.STOP_TIMER,\n      task,\n    }\n  },\n  // RESET TASK TIMER\n  resetTimer: (time) => {\n    return {\n      type: types.RESET_TIMER,\n      time,\n    }\n  },\n}\n","import { types }from './actions'\n\nconst initialState = {\n  tasks: [\n    /* TASK STATUS\n      0 = PENDING\n      1 = COMPLETED\n      -1 = ON TIMER\n    */\n  ],\n  filter: null,\n  timer: {\n    /*\n    0 = STOP\n    1 = RUNNING\n    2 = PAUSE\n    */\n    status: 0,\n    // if pause, set the elapsed value on ms\n    elapsed: null\n  }\n};\n\nconst tasksApp = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_TASK:\n      return {\n        ...state,\n        tasks: [\n          ...state.tasks,\n          action.task\n        ],\n      }\n\n\n    case types.SELECT_FILTER:\n      return {\n        ...state,\n        filter: action.value\n      }\n\n    case types.REMOVE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.filter(task => task.id !== action.id),\n      }\n\n    case types.EDITABLE_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.map(task => {\n          if (task.id === action.id) {\n            task.editable = true;\n          }\n          return task\n        }),\n      }\n\n      case types.COMPLETED_TASK:\n      return {\n        ...state,\n        tasks: state.tasks.map(task => {\n          if (task.id === action.id) {\n            task.status = 1;\n            task.completed_duration = action.time;\n          }\n          return task\n        }),\n      }\n      \n      case types.EDIT_TASK:\n        return {\n          ...state,\n          tasks: state.tasks.map(task => {\n            if (task.id === action.id) {\n              task.estimated_duration = action.estimated_duration;\n              task.description = action.description;\n              task.editable = false;\n            }\n            return task\n          }),\n        }\n\n    case types.START_TIMER:\n      return {\n        ...state,\n        timer: {\n          runningTask: action.task,\n          deadline: action.deadline,\n          status: 1,\n        },\n        tasks: state.tasks.map(task => {\n          if (task.id === action.task.id) {\n            task.status = -1;\n          }\n          return task\n        }),\n      }\n\n      case types.PAUSE_TIMER:\n        return {\n          ...state,\n          timer: {\n            ...state.timer,\n            status: 2,\n            elapsed: action.elapsed\n          },\n        }\n\n    case types.RESET_TIMER:\n      return {\n        ...state,\n        timer: {\n          ...state.timer,\n          deadline: action.time,\n          status: 1,\n          elapsed: null\n        },\n      }\n\n    case types.STOP_TIMER:\n      return {\n        ...state,\n        tasks: state.tasks.map(task => {\n          if (action.task && task.id === action.task.id) {\n            task.status = 0;\n          }\n          return task\n        }),\n        timer: {\n          ...initialState.timer\n        }\n      }\n\n    default:\n      return state\n  }\n}\n\nexport default tasksApp\n","import React from \"react\";\nimport { Card, Typography, Icon, Menu, Dropdown } from \"antd\";\nconst { Title, Paragraph } = Typography;\nconst { Item } = Menu;\n\nconst TaskItem = ({ task, actions }) => {\n  const menu = (\n    <Menu>\n      {task.status === 0 && (\n        <Item\n          style={{ color: \"#08c\" }}\n          onClick={() => actions.setEditable(task.id)}\n        >\n          <Icon type=\"edit\" />\n          <span>Edit</span>\n        </Item>\n      )}\n      <Item style={{ color: \"red\" }} onClick={() => actions.remove(task.id)}>\n        <Icon type=\"close\" />\n        <span>Remove</span>\n      </Item>\n    </Menu>\n  );\n\n  const DropdownActions = (\n    <div style={{ textAlign: \"end\", fontSize: 25 }}>\n      <Dropdown overlay={menu}>\n        <Icon type=\"more\" />\n      </Dropdown>\n    </div>\n  );\n\n  const showTime = task.status === 1 ? `completed in ${task.completed_duration}` : `${task.estimated_duration} min estimated`;\n  return (\n    <Card.Meta\n      description={\n        <Paragraph style={{ fontSize: 20 }}>{task.description}</Paragraph>\n      }\n      avatar={<Title level={2}>{showTime}</Title>}\n      title={DropdownActions}\n    />\n  );\n};\n\nexport default TaskItem;\n","const DurationTypes = [\n  {\n    key: 1,\n    timeValue: 30,\n    tag: \"S\"\n  },\n  {\n    key: 2,\n    timeValue: 45,\n    tag: \"M\"\n  },\n  {\n    key: 3,\n    timeValue: 60,\n    tag: \"L\"\n  }\n];\n\nexport { DurationTypes };\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Col, Row, Form, Input, Button, Select } from \"antd\";\nimport { DurationTypes } from \"../Constants\";\nconst { Item } = Form;\nconst { Option } = Select;\n\nconst TaskForm = Form.create({\n  name: \"add-task\",\n  mapPropsToFields(props) {\n    const { task } = props;\n    const description = task\n      ? Form.createFormField({\n          value: task.description\n        })\n      : null;\n    const estimated_duration = task\n      ? Form.createFormField({\n          value: task.estimated_duration\n        })\n      : null;\n    return {\n      description,\n      estimated_duration\n    };\n  }\n})(\n  class extends Component {\n    handleSubmit = e => {\n      e.preventDefault();\n      const { form, add, edit, task } = this.props;\n      form.validateFields((err, values) => {\n        if (!err) {\n          if (edit) {\n            edit({ id: task.id, ...values });\n          } else {\n            add(values);\n            form.resetFields();\n          }\n        }\n      });\n    };\n\n    render() {\n      const { getFieldDecorator } = this.props.form;\n      const iconButton = this.props.edit ? \"edit\" : \"plus\";\n      return (\n        <Form onSubmit={this.handleSubmit}>\n          <Row gutter={16}>\n            <Col span={14}>\n              <Item hasFeedback>\n                {getFieldDecorator(\"description\", {\n                  rules: [{ required: true, message: \"Required!\" }]\n                })(<Input placeholder=\"Description Task\" />)}\n              </Item>\n            </Col>\n            <Col span={6}>\n              <Item hasFeedback>\n                {getFieldDecorator(\"estimated_duration\", {\n                  rules: [{ required: true, message: \"Required!\" }]\n                })(\n                  <Select placeholder=\"Choose estimated duration\">\n                    {DurationTypes.map(d => (\n                      <Option\n                        key={d.key}\n                        value={d.timeValue}\n                      >{`(${d.tag}) ${d.timeValue} min`}</Option>\n                    ))}\n                  </Select>\n                )}\n              </Item>\n            </Col>\n            <Col span={4}>\n              <Item>\n                <Button icon={iconButton} type=\"primary\" htmlType=\"submit\">\n                  Task\n                </Button>\n              </Item>\n            </Col>\n          </Row>\n        </Form>\n      );\n    }\n  }\n);\n\nTaskForm.propTypes = {\n  add: PropTypes.func,\n  edit: PropTypes.func\n};\n\nexport default TaskForm;\n","import React from \"react\";\nimport EditTask from '../AddTask';\n\nconst TaskItem = ({ task, actions }) => {\n  return (\n      <EditTask task={task} edit={ task => actions.edit(task) } />\n  );\n};\n\nexport default TaskItem;\n","import React from \"react\";\nimport {\n  Card,\n} from \"antd\";\n\nimport ReadOnly from './readOnly';\nimport Editable from './Editable';\n\nconst TaskItem = props => {\n  const { task } = props;\n  return (\n    <Card size=\"small\">\n      {\n        task.editable\n        ?\n        <Editable {...props} />\n        :\n        <ReadOnly {...props} />\n      }\n    </Card>\n  );\n};\n\nexport default TaskItem;\n","import React from \"react\";\nimport { Timeline, Card, Empty } from \"antd\";\nimport TaskItem from \"../TaskItem\";\n\nconst TasksList = ({ tasks, remove, setEditable, edit }) => (\n  <Timeline>\n    {\n      tasks.length > 0\n      ?\n      tasks.map(item => (\n        <Timeline.Item key={item.id} color={item.status === 1 ? 'green' : 'blue' }>\n          <TaskItem task={item} actions={{ remove, setEditable, edit }} />\n        </Timeline.Item>\n      ))\n      :\n      <Card>\n        <Empty/>\n      </Card>\n    }\n  </Timeline>\n);\n\nexport default TasksList;","import React from \"react\";\nimport { Col, Row, Select } from \"antd\";\nimport { connect } from \"react-redux\";\nimport { actionCreators } from \"../actions\";\nimport { DurationTypes } from \"../components/Constants\";\nconst { Option } = Select;\n\nconst SelectFilter = ({ selectFilter }) => (\n  <Row type=\"flex\" justify=\"end\" style={{ padding: 10 }}>\n    <Col span={8}>\n      <Select\n        placeholder=\"Filter by\"\n        allowClear={true}\n        style={{ width: 150 }}\n        onChange={v => {\n          selectFilter(v);\n        }}\n      >\n        {DurationTypes.map(d => (\n          <Option\n            key={d.key}\n            value={d.timeValue}\n          >{`(${d.tag}) ${d.timeValue} min`}</Option>\n        ))}\n      </Select>\n    </Col>\n  </Row>\n);\n\nconst mapDispatch = dispatch => {\n  return {\n    selectFilter: v => dispatch(actionCreators.selectFilter(v))\n  };\n};\n\nconst Container = connect(\n  null,\n  mapDispatch\n)(SelectFilter);\n\nexport default Container;\n","import React from \"react\";\nimport { Tabs, Icon } from \"antd\";\nimport { connect } from \"react-redux\";\nimport TaskList from \"../components/TasksList\";\nimport { actionCreators } from \"../actions\";\nimport Filter from './Filter';\nconst { TabPane } = Tabs;\n\nconst TabPanel = ({ todos, completed, edit, remove, setEditable }) => {\n  const actions = { edit, remove, setEditable };\n  return (\n    <Tabs defaultActiveKey=\"1\" style={{ textAlign: \"center\", fontSize: 30 }}>\n      <TabPane\n        tab={\n          <span>\n            <Icon type=\"bars\" />\n            To do\n          </span>\n        }\n        key=\"1\"\n      >\n        <Filter />\n        <TaskList tasks={todos} {...actions} />\n      </TabPane>\n      <TabPane\n        tab={\n          <span>\n            <Icon type=\"history\" />\n            Completed\n          </span>\n        }\n        key=\"2\"\n      >\n        <TaskList tasks={completed} {...actions} />\n      </TabPane>\n    </Tabs>\n  );\n};\n\nconst filterTodos = (todos, filter) => {\n  const filtered = filter ? todos.filter(t => t.estimated_duration === filter) : todos;\n  return filtered;\n};\n\nconst mapState = ({ tasks, filter }) => {\n  const todos = filterTodos(tasks.filter(t => t.status === 0), filter);\n  const completed = tasks.filter(t => t.status === 1);\n  return {\n    todos,\n    completed\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    remove: id => dispatch(actionCreators.removeTask(id)),\n    setEditable: id => dispatch(actionCreators.editableTask(id)),\n    edit: t => dispatch(actionCreators.editTask(t))\n  };\n};\n\nconst Container = connect(\n  mapState,\n  mapDispatch\n)(TabPanel);\n\nexport default Container;\n","import { connect } from \"react-redux\";\nimport AddTask from \"../components/AddTask\";\nimport { actionCreators } from \"../actions\";\n\nconst mapState = state => {\n  return {\n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    add: (n) => dispatch(actionCreators.addTask(n)),\n  };\n};\n\nconst Container = connect(\n  mapState,\n  mapDispatch\n)(AddTask);\n\nexport default Container;\n","// convert ms to seconds\nconst multi = 1000 * 60;\n\nconst convert = value => Date.now() + multi * value;\n\nconst msToTime = duration => {\n    let seconds = parseInt((duration / 1000) % 60);\n    let minutes = parseInt((duration / (1000 * 60)) % 60);\n    let hours = parseInt((duration / (1000 * 60 * 60)) % 24);\n  \n    hours = hours < 10 ? \"0\" + hours : hours;\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  \n    return hours + \":\" + minutes + \":\" + seconds;\n  };\n\n  export {\n      multi,\n      convert,\n      msToTime,\n  };","import React from \"react\";\nimport { Statistic, Typography } from \"antd\";\nimport { msToTime } from './helpers';\nconst { Paragraph } = Typography;\nconst { Countdown } = Statistic;\n\nconst CountDown = ({ item, finish }) => {\n  const { status, deadline, runningTask } = item;\n  const now = Date.now();\n  const remaining = deadline - now;\n  const pauseTime = status === 2 ? msToTime(remaining) : \"00:00:00\";\n  const styles = { color: 'white' };\n  return (\n    <div>\n      {status === 1 && (\n        <Countdown\n          valueStyle={styles}\n          title={<Paragraph style={styles}>{runningTask.description}</Paragraph>}\n          value={deadline}\n          onFinish={finish}\n        />\n      )}\n      {status === 2 && (\n        <Statistic\n          valueStyle={styles}\n          title={<Paragraph style={styles}>{runningTask.description}</Paragraph>}\n          value={pauseTime}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default CountDown;\n","import React from \"react\";\nimport { Button } from \"antd\";\nconst { Group } = Button;\n\nconst styleControlButton = {\n  fontSize: 25\n};\n\nconst Buttons = ({ status, actions, canStart }) => (\n  <div>\n    {status === 0 ? (\n      <Button\n        disabled={!canStart}\n        size=\"large\"\n        style={styleControlButton}\n        type=\"primary\"\n        icon=\"play-circle\"\n        onClick={actions.start}\n      >\n        Start\n      </Button>\n    ) : (\n      <div>\n        <Button\n          size=\"large\"\n          type=\"primary\"\n          style={{ fontSize: 25, margin: 10 }}\n          icon=\"check-circle\"\n          onClick={actions.completed}\n        >\n          task\n        </Button>\n        <Group>\n          {status === 2 ? (\n            <Button\n              size=\"large\"\n              style={styleControlButton}\n              icon=\"play-circle\"\n              onClick={actions.resume}\n            />\n          ) : (\n            <Button\n              size=\"large\"\n              style={styleControlButton}\n              icon=\"pause-circle\"\n              onClick={actions.pause}\n            />\n          )}\n          <Button\n            size=\"large\"\n            style={styleControlButton}\n            icon=\"stop\"\n            onClick={actions.stop}\n          />\n          <Button\n            size=\"large\"\n            style={styleControlButton}\n            icon=\"undo\"\n            onClick={actions.reset}\n          />\n        </Group>\n      </div>\n    )}\n  </div>\n);\n\nexport default Buttons;\n","import React, { Component } from \"react\";\nimport { Row, Col } from \"antd\";\nimport Countdown from \"./TimerCountdown\";\nimport Buttons from \"./TimerButtons\";\nimport { multi, convert, msToTime } from './helpers';\n\nclass TaskTimer extends Component {\n  \n  startTimer() {\n    const { nextTask, start } = this.props;\n    if (nextTask) {\n      const deadline = convert(nextTask.estimated_duration);\n      start(nextTask, deadline);\n    }\n  }\n\n  stopTimer() {\n    const { timer, stop } = this.props;\n    if (timer.runningTask) {\n      stop(timer.runningTask);\n    }\n  }\n\n  pauseTimer() {\n    const { timer, pause } = this.props;\n    const { runningTask, deadline } = timer;\n    const now = Date.now();\n    const remaining = deadline - now;\n    const elapsed = multi * runningTask.estimated_duration - remaining;\n    pause(elapsed);\n  }\n\n  resumeTimer() {\n    const { timer, reset } = this.props;\n    const { runningTask, elapsed } = timer;\n    const deadline = convert(runningTask.estimated_duration) - elapsed;\n    reset(deadline);\n  }\n\n  resetTimer() {\n    const { timer, reset } = this.props;\n    const deadline = convert(timer.runningTask.estimated_duration);\n    reset(deadline);\n  }\n\n  setCompleted(){\n    const { timer, setCompleted } = this.props;\n    const { runningTask, deadline } = timer;\n    const now = Date.now();\n    const remaining = deadline - now;\n    const duration = multi * runningTask.estimated_duration - remaining;\n    setCompleted(runningTask.id, msToTime(duration))\n  }\n\n  onFinish() {\n    const { nextTask, start, stop } = this.props;\n    this.setCompleted();\n    if (nextTask) {\n      const deadline = convert(nextTask.estimated_duration);\n      start(nextTask, deadline);\n    } else {\n      stop();\n    }\n  }\n\n  render() {\n    const { timer, canStart } = this.props;\n    return (\n      <div>\n        <Row type=\"flex\" justify=\"center\">\n          <Col span={12}>\n            <Countdown item={timer} finish={() => this.onFinish()} />\n          </Col>\n          <Col span={12}>\n            <Buttons\n              status={timer.status}\n              canStart={canStart}\n              actions={{\n                start: () => this.startTimer(),\n                pause: () => this.pauseTimer(),\n                resume: () => this.resumeTimer(),\n                completed: () => this.onFinish(),\n                stop: () => this.stopTimer(),\n                reset: () => this.resetTimer()\n              }}\n            />\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default TaskTimer;\n","import { connect } from \"react-redux\";\nimport TaskTimer from \"../components/TaskTimer\";\nimport { actionCreators } from \"../actions\";\n\nconst mapState = ({tasks, timer}) => {\n  const todos = tasks.filter(t => t.status === 0);\n  const nextTask = todos[0];\n  return {\n    nextTask,\n    timer,\n    canStart: todos.length > 0 ? true : false \n  };\n};\n\nconst mapDispatch = dispatch => {\n  return {\n    start: (t, d) => dispatch(actionCreators.startTimer(t, d)),\n    pause: (t) => dispatch(actionCreators.pauseTimer(t)),\n    setCompleted: (id, time) => dispatch(actionCreators.completedTask(id, time)),\n    stop: (t) => dispatch(actionCreators.stopTimer(t)),\n    reset: (t) => dispatch(actionCreators.resetTimer(t)),\n  };\n};\n\nconst Container = connect(\n  mapState,\n  mapDispatch\n)(TaskTimer);\n\nexport default Container;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Row, Col, Layout } from \"antd\";\nimport { Add, List, Timer } from \"./containers\";\nconst { Header, Content } = Layout;\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Header style={{ position: 'fixed', zIndex: 1, width: '100%', height: 100 }}>\n          <Row type=\"flex\" justify=\"center\" style={{ marginTop: 24 }}>\n              <Col span={12}>\n                <Timer />\n              </Col>\n            </Row>\n          </Header>\n          <Content style={{ padding: 24, margin: 0, minHeight: \"100vh\" }}>\n            <Row type=\"flex\" justify=\"center\" style={{ marginTop: 100 }}>\n              <Col span={12}>\n                <List />\n              </Col>\n            </Row>\n            <Row type=\"flex\" justify=\"center\" style={{ marginTop: 24 }}>\n              <Col span={12}>\n                <Add />\n              </Col>\n            </Row>\n          </Content>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux'\nimport { createStore } from 'redux'\nimport tasksApp from './reducers'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(tasksApp)\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}